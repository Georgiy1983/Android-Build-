name: Build Kivy APK - Fixed AIDL

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          git \
          zip \
          unzip \
          openjdk-17-jdk \
          autoconf \
          automake \
          libtool \
          pkg-config \
          zlib1g-dev \
          libncurses5-dev \
          libncursesw5-dev \
          libtinfo5 \
          cmake \
          libffi-dev \
          libssl-dev \
          python3-dev \
          libjpeg-dev \
          libpng-dev

    - name: Install Android Command Line Tools
      run: |
        # Скачиваем Android Command Line Tools
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        unzip -q commandlinetools-linux-9477386_latest.zip
        mkdir -p android-sdk/cmdline-tools/latest
        mv cmdline-tools/* android-sdk/cmdline-tools/latest/
        rm -rf cmdline-tools commandlinetools-linux-9477386_latest.zip
        
        # Устанавливаем необходимые компоненты
        echo "y" | android-sdk/cmdline-tools/latest/bin/sdkmanager --sdk_root=android-sdk "build-tools;34.0.0"
        echo "y" | android-sdk/cmdline-tools/latest/bin/sdkmanager --sdk_root=android-sdk "platforms;android-34"
        echo "y" | android-sdk/cmdline-tools/latest/bin/sdkmanager --sdk_root=android-sdk "platform-tools"
        
        # Добавляем в PATH
        echo "$GITHUB_WORKSPACE/android-sdk/build-tools/34.0.0" >> $GITHUB_PATH
        echo "$GITHUB_WORKSPACE/android-sdk/platform-tools" >> $GITHUB_PATH

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install cython==0.29.33
        pip install buildozer
        pip install kivy

    - name: Create buildozer.spec with correct Android settings
      run: |
        if [ ! -f buildozer.spec ]; then
          buildozer init
        fi
        
        # Обновляем buildozer.spec с правильными настройками
        cat > buildozer.spec << EOL
[app]
title = My Kivy App
package.name = myapp
package.domain = org.test
source.dir = .
source.include_exts = py,png,jpg,kv,atlas
version = 1.0
requirements = python3,kivy
orientation = portrait

[buildozer]
log_level = 2

# Android specific settings
android.ndk_path = $HOME/.buildozer/android/platform/android-ndk-r23b
android.sdk_path = $GITHUB_WORKSPACE/android-sdk
android.ndk = 23b
android.sdk = 34
android.build_tools = 34.0.0
android.api = 34
EOL

    - name: Build APK with Buildozer
      run: |
        # Устанавливаем переменные окружения для Android SDK
        export ANDROID_SDK_ROOT=$GITHUB_WORKSPACE/android-sdk
        export ANDROID_NDK_HOME=$HOME/.buildozer/android/platform/android-ndk-r23b
        export PATH=$ANDROID_SDK_ROOT/build-tools/34.0.0:$ANDROID_SDK_ROOT/platform-tools:$PATH
        
        buildozer -v android debug

    - name: Find and upload APK
      run: |
        echo "Searching for APK files..."
        find . -name "*.apk" -type f | head -10
        ls -la bin/ || true
        
        # Копируем APK если он в нестандартном месте
        if [ ! -f bin/*.apk ]; then
          mkdir -p bin
          find .buildozer -name "*.apk" -exec cp {} bin/ \;
        fi

    - name: Upload APK artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: bin/*.apk

    - name: Upload build logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          .buildozer
          buildozer.spec